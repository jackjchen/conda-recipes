{% set name = "visitor" %}
{% set version = "0.1.3" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  git_rev: {{ version }}
  git_url: https://github.com/mbr/visitor.git

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  host:
    - python
  run:
    - python

test:
  imports:
    - visitor

about:
  home: http://github.com/mbr/visitor
  license: MIT
  license_family: MIT
  license_file: ''
  summary: A tiny pythonic visitor implementation.
  description: "visitor\n=======\n\nA tiny library to facilitate `visitor\n<https://en.wikipedia.org/wiki/Visitor_pattern>`_ implementation in Python\n(which are slightly peculiar due to dynamic typing).\
    \ In fact, it is so small,\nyou may just be better off copy & pasting the source straight into your\nproject...\n\n\nExample use\n-----------\n\nA simple JSON-encoder:\n\n.. code-block:: python\n\n\
    \    from visitor import Visitor\n\n\n    class JSONEncoder(Visitor):\n        def __init__(self):\n            self.indent = 0\n\n        def escape_str(self, s):\n            # note: this is not a\
    \ good escape function, do not use this in\n            # production!\n            s = s.replace('\\\\', '\\\\\\\\')\n            s = s.replace('\"', '\\\\\"')\n            return '\"' + s + '\"'\n\n\
    \        def visit_list(self, node):\n            self.indent += 1\n            s = '[\\n' + '  ' * self.indent\n            s += (',\\n' + '  ' * self.indent).join(self.visit(item)\n              \
    \                                     for item in node)\n            self.indent -= 1\n            s += '\\n' + '  ' * self.indent + ']'\n            return s\n\n        def visit_str(self, node):\n\
    \            return self.escape_str(node)\n\n        def visit_int(self, node):\n            return str(node)\n\n        def visit_bool(self, node):\n            return 'true' if node else 'false'\n\
    \n        def visit_dict(self, node):\n            self.indent += 1\n            s = '{\\n' + '  ' * self.indent\n            s += (',\\n' + '  ' * self.indent).join(\n                '{}: {}'.format(self.escape_str(key),\
    \ self.visit(value))\n                for key, value in sorted(node.items())\n            )\n            self.indent -= 1\n            s += '\\n' + '  ' * self.indent + '}'\n            return s\n\n\
    \n    data = [\n        'List', 'of', 42, 'items', True, {\n            'sub1': 'some string',\n            'sub2': {\n                'sub2sub1': False,\n                'sub2sub2': 123,\n        \
    \    }\n        }\n    ]\n\n    print(JSONEncoder().visit(data))\n\n\n\nOutput::\n\n    [\n      \"List\",\n      \"of\",\n      42,\n      \"items\",\n      true,\n      {\n        \"sub1\": \"some\
    \ string\",\n        \"sub2\": {\n          \"sub2sub1\": false,\n          \"sub2sub2\": 123\n        }\n      }\n    ]"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
